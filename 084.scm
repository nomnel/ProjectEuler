;; Gauche 0.9.3

(add-load-path "." :relative)
(use eulerlib)

(use srfi-1)
(use srfi-27)
(use gauche.sequence)

(define (e84)
  (define pos 0)
  (define tally (make-vector 40 0))
  (define (advance n)
    (advance-to (+ pos n)))
  (define (advance-to p)
    (set! pos (modulo p 40))
    (vector-set! tally pos (+ 1 (vector-ref tally pos)))
    (event pos))
  (define (event at)
    (case at
      ((2 17 33) (draw-CC))
      ((7 22 36) (draw-CH))
      ((30) (advance-to 10))))
  (define (ignore))
  (define draw-CC
    (let1 CC (apply circular-list (append `(,(cut advance-to 0) ,(cut advance-to 10))
					  (make-list 14 ignore)))
      (^() ((car CC)) (set! CC (cdr CC)))))
  (define draw-CH
    (let1 CH (apply circular-list (append `(,(cut advance-to 0)
					    ,(cut advance-to 10)
					    ,(cut advance-to 11)
					    ,(cut advance-to 24)
					    ,(cut advance-to 39)
					    ,(cut advance-to 5)
					    ,go-next-R
					    ,go-next-R
					    ,go-next-U
					    ,(cut advance -3))
					  (make-list 6 ignore)))
      (^() ((car CH)) (set! CH (cdr CH)))))
  (define (go-next-R)
    (cond ((< pos 5) (advance-to 5))
	  ((< pos 15) (advance-to 15))
	  ((< pos 25) (advance-to 25))
	  ((< pos 35) (advance-to 35))
	  (else (advance-to 5))))
  (define (go-next-U)
    (cond ((< pos 12) (advance-to 12))
	  ((< pos 28) (advance-to 28))
	  (else (advance-to 12))))
  (define (roll)
    (let* ((roll-dice (^() `(,(+ 1 (random-integer 4)) ,(+ 1 (random-integer 4)))))
	   (double? (^(casts) (= (car casts) (cadr casts))))
	   (casts-sum (^(casts) (apply + casts)))
	   (casts1 (roll-dice))
	   (casts2 (roll-dice))
	   (casts3 (roll-dice)))
      (advance (casts-sum casts1))
      (when (double? casts1)
	(advance (casts-sum casts2))
	(when (double? casts2)
	  (if (double? casts3)
	      (advance-to 10)
	      (advance (casts-sum casts3)))))))

  (dotimes (sample 1000000) (roll))
  (let1 l (sort (map-with-index (^(i v) `(,i ,v))
				(vector->list tally))
		(^(a b) (> (cadr a) (cadr b))))
    (list->integer `(,(caar l) ,(caadr l) ,(caaddr l)))))