(define (e19)
  (define (leap-year? y)
    (or (zero? (modulo y 400))
        (and (zero? (modulo y 4))
             (not (zero? (modulo y 100))))))
  (define (month-days y)
    `(31 ,(if (leap-year? y) 29 28) 31 30 31 30 31 31 30 31 30 31))
  (cdr (fold (^(n p)
                (let ((d (modulo (+ n (car p)) 7)) ; d=0 -> Sun, d=1 -> Mon, ...
                      (r (cdr p)))
                  (cons d (if (zero? d) (+ 1 r) r))))
             (cons (modulo (+ 1 (if (leap-year? 1900) 366 365)) 7) 0)
             (apply append (map month-days (iota 100 1901))))))
